{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "47760cf6-40ff-48dc-85ed-3e4bd3cb3702",
   "metadata": {},
   "source": [
    "<center>\n",
    "<div class=\"alert alert-block alert-info\">\n",
    "    <h1> </h1>\n",
    "    <h1><font size=\"+3\"> <b> Math340 HW7 </b> </font></h1>\n",
    "    <h1><font size=\"+3\"> <b> Programming in Mathematics </b> </font></h1>\n",
    "    <h1><font size=\"+3\"> <b> Due March 24, 2025 </b> </font></h1>\n",
    "    \n",
    "</div>\n",
    "</center>\n",
    "\n",
    "<br>\n",
    "\n",
    "\n",
    "\n",
    "<center>\n",
    "<font size=\"+2\">\n",
    "Department of Mathematics and Statistics <br> <br>\n",
    "San Diego State University <br> <br>\n",
    "Spring 2025\n",
    "</font>\n",
    "</center>\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4762584-5789-4e8f-80f8-0ee36157270f",
   "metadata": {},
   "source": [
    "## Your Name: Meg Bucich\n",
    "\n",
    "## Your ID: 131787276\n",
    "\n",
    "## 1. Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2eb4f8a2-2613-437f-9636-d500409b110c",
   "metadata": {},
   "source": [
    "(1) We were asked to update the given code to find the largest Fibonacci number that can be represented by a 64 bit integer. We were then asked to find the ratio of consecutive fibonacci numbers (notoriously known as the golden ratio $\\phi$). Then we had to solve $m$ such that $\\lambda^{m} < Fib_{max} < \\lambda^{m+1}$ (2) We had to run the code 5 different times that ran for 20 seconds to find the largest prime number. Each time the value got higher. Then we were tasked with changing the allotted time to get a larger number. (3) We had to hand calculate 4 different terms from the given information. Once we had those numbers, we added them to the code and ran it."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38f22eb0-6186-415d-bb33-683b246169a0",
   "metadata": {},
   "source": [
    "## 2. Methodology"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12a9ba35-bb43-4cca-b3a6-02f4b6bcfc30",
   "metadata": {},
   "source": [
    "(1) The code I added was a line that compared the next fibonacci number to the largest number that can be represented by a 64-bit integer which was given to us as np.iinfo(np.int64).max. Once the statement was no longer true, the loop breaks and we have found our solution. To find the golden ratio, I iterated through the fib list that was created in part a and took the ratio of each consecutive term (avoiding a divison by zero) and appended tgem to an empty list. I then took the average of that list to give us the beautiful golden ratio of approximately 1.61453. To get our unknown value of m, I kept raising $\\phi$ to integer powers through a loop until it was no longer less than our largest fibonacci number from part (a). Our value for m would be one less than that value. (2) I choose to just do 60 seconds to get a larger prime number. (3) Not much to say, I just used the given numbers to calcuate my values and take my partial derivative which wasn't super difficult."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc67c18e-c882-4475-86ef-90f8ad267dac",
   "metadata": {},
   "source": [
    "## 3. Code and Results (e.g., Tables, Figures, Outputs)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e274ce4-0edf-43ac-becc-209473b6a554",
   "metadata": {},
   "source": [
    "### Results for Question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5fcb995-df22-40ae-bc81-88951afebc35",
   "metadata": {},
   "source": [
    "(a) implement code to identify the largest Fibonacci number that can be represented by a 64 bit integer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3eb5a80b-2090-4764-aa03-463e4683a9be",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The largest Fibonacci number representable by a 64-bit integer is:  7540113804746346429\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "max_value = np.iinfo(np.int64).max\n",
    "fib = [0,1]\n",
    "while True:\n",
    "    next_fib = fib[-1] + fib[-2]\n",
    "    if next_fib < max_value:\n",
    "        fib.append(next_fib)\n",
    "    else:\n",
    "        break\n",
    "print(\"The largest Fibonacci number representable by a 64-bit integer is: \", fib[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab6ee4dd-474a-454e-b65a-12fcf7ef19c4",
   "metadata": {},
   "source": [
    "(b) referencing the lecture notes, approximate the ratio of two consecutive Fibonacci numbers as $\\lambda$. Determine the value of m such that $\\lambda^{m} < Fib_{max} < \\lambda^{m+1}$ where $Fib_{max}$ denotes the largest Fibonacci number representable by a 64-bit integer as determined in (a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6652c7c4-747f-4d74-a5ae-e5cfa6e92a65",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Golden Ratio is:  1.6145345056281966\n",
      "the value of m is:  90\n"
     ]
    }
   ],
   "source": [
    "ratio = []\n",
    "n = len(fib)\n",
    "for i in range(1,n-1):\n",
    "    ratio.append(fib[i+1]/fib[i])\n",
    "phi = np.mean(ratio)\n",
    "print(\"The Golden Ratio is: \", phi)\n",
    "a = fib[-1]\n",
    "m = 1\n",
    "while phi**m < a:\n",
    "    m += 1 \n",
    "m -= 1\n",
    "print(\"the value of m is: \" , m)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e76e3442-aafc-4b00-9805-bdf6295be8bc",
   "metadata": {},
   "source": [
    "### Results for Question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad5dfa54-7725-4816-a2a8-bc818b1e8266",
   "metadata": {},
   "source": [
    "see collab "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17859285-7ce0-41f1-bad4-9c2db27cd73b",
   "metadata": {},
   "source": [
    "### Results for Question 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97a2d485-b6da-4b46-ac64-fe85b9f8b16b",
   "metadata": {},
   "source": [
    "### Part A"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed3dd8e3-1a21-4547-8008-475ecb8de924",
   "metadata": {},
   "source": [
    "$\\hat{q} = z = w_{3}a + b2 = 0.7(a)+.2$\\\n",
    "$a = x =w_{1}u+w_{2}v + b1 = .3(.5)+.4(.1)+.1 = .29 $\\\n",
    "$\\hat{q} = .7(.29) + .2 = .403$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5cb88fc-87de-40d2-adfe-606c1f511ddf",
   "metadata": {},
   "source": [
    "### Part B"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7a50c3b-3d8d-42e6-ab8b-eaa2411965bf",
   "metadata": {},
   "source": [
    "$ L = \\frac{1}{2}(q - \\hat{q})^{2}$\\\n",
    "$\\hat{q} = w_{3}a+b_{2}$\\\n",
    "$ \\hat{q} = w_{3} ( w_{1}u + w_{2}v + b1 ) + b2$\\\n",
    "$ \\hat{q} = w_{3}w_{1}u + w_{3}w_{2}v + w_{3}b_{1} + b_{2}$\\\n",
    "$ L = \\frac{1}{2}(q - (w_{3}w_{1}u + w_{3}w_{2}v + w_{3}b_{1} + b_{2}) )^{2}$\\\n",
    "$\\frac{\\partial L}{\\partial w_{1}} = -(q - (w_{3}w_{1}u + w_{3}w_{2}v + w_{3}b_{1} + b_{2}) ) w_{3}u $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "722cc589-eaf4-4ffb-ba3d-c0ac6e074131",
   "metadata": {},
   "source": [
    "### Part C"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bd81bca-4171-4ed0-80dd-2e469bd433f6",
   "metadata": {},
   "source": [
    "$\\frac{\\partial L}{\\partial w_{1}} = -(1 - (.7(.3)(.5) + .7(.4)(.1) + .7(.1) + .2).7(.5)) = -.20895  $"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77a65752-0f22-4e35-a809-aa069bee3b77",
   "metadata": {},
   "source": [
    "### Part D"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8b6a2f8-db2d-4525-a98b-d6badc72920f",
   "metadata": {},
   "source": [
    "new $w_{1} =$ old $w_{1} - \\alpha\\frac{\\partial L}{\\partial w_{1}}, \\alpha = 0.15$\\\n",
    "new $w_{1} = 0.3 - 0.15(-.20895) = .3313425$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "884f5dda-ab56-4b5a-8670-764e7f281c45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Loss: 0.1782045\n",
      "Updated w1: 0.250298625\n"
     ]
    }
   ],
   "source": [
    "u = 0.5\n",
    "v = 0.1\n",
    "w1 = 0.3\n",
    "w2 = 0.4\n",
    "b1 = 0.1\n",
    "w3 = 0.7\n",
    "b2 = 0.2\n",
    "target_q = 1\n",
    "learning_rate = .15\n",
    "x = (u * w1) + (v * w2) + b1\n",
    "a = x\n",
    "z = (a * w3) + b2\n",
    "predicted_q = z\n",
    "L = 0.5 * (predicted_q - target_q) ** 2\n",
    "print(f\"Initial Loss: {L}\")\n",
    "dL_dq_hat = predicted_q - target_q\n",
    "dL_dz = dL_dq_hat\n",
    "dL_dw1 = .3313425\n",
    "w1 = w1 - learning_rate * dL_dw1\n",
    "print(f\"Updated w1: {w1}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ca119cf4-da5d-4cdf-99e7-98525429f0a4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
